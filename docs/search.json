[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "simona_egli_ICMB_HS24",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "simona_egli_ICMB_HS24"
    ]
  },
  {
    "objectID": "hw1/indexhw1.html",
    "href": "hw1/indexhw1.html",
    "title": "Assignment 1 ICMB",
    "section": "",
    "text": "Here is a random plot for the first assignment\nCode\nx &lt;- rnorm(75000, mean = 50, sd = 5)\n\nhist(x)",
    "crumbs": [
      "About",
      "Assignment 1 ICMB"
    ]
  },
  {
    "objectID": "hw1/indexhw1.html#quarto",
    "href": "hw1/indexhw1.html#quarto",
    "title": "Assignment 1 ICMB",
    "section": "Quarto",
    "text": "Quarto\nQuarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see https://quarto.org.",
    "crumbs": [
      "About",
      "Assignment 1 ICMB"
    ]
  },
  {
    "objectID": "hw1/indexhw1.html#running-code",
    "href": "hw1/indexhw1.html#running-code",
    "title": "Assignment 1 ICMB",
    "section": "Running Code",
    "text": "Running Code\nWhen you click the Render button a document will be generated that includes both content and the output of embedded code. You can embed code like this:\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\nYou can add options to executable code like this\n\n\n[1] 4\n\n\nThe echo: false option disables the printing of code (only output is displayed).",
    "crumbs": [
      "About",
      "Assignment 1 ICMB"
    ]
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n\nCode\n1 + 1\n\n\n[1] 2\n\n\n\n\n\n\n\n Back to top"
  },
  {
    "objectID": "hw2/indexhw2.html",
    "href": "hw2/indexhw2.html",
    "title": "",
    "section": "",
    "text": "CodeShow All CodeHide All CodeView Source\n\n\n\n\n\nAssignment 2: The Economics Simulation\nDisclosure: A lot of this assignment was created by consulting ChatGPT, especially during the (as of yet) unsuccessful attempt to not have the endless warning “NAs produziert” as the final output\n\nPreliminary definitions\n\n\nCode\nN &lt;- 100 # default size of the population\nMU &lt;- 100 # default mean of the population\n\npopulation &lt;- rnorm(N, mean=MU, sd=MU/5)\n\npercentile &lt;- function(p, x) {\n  return(quantile(x, probs = p / 100, na.rm = TRUE))\n}\n\n\nGini Coefficient\n\n\nCode\ngini &lt;- function(y) {\n  y &lt;- sort(y)\n  n &lt;- length(y)\n  numer &lt;- sum((2 * (1:n) - n - 1) * y)\n  denom &lt;- n * sum(y)\n  gini_coeff &lt;- numer / denom\n  return(gini_coeff)\n}\n\n\nPlotting a histogram of the population\n\n\nCode\nhist(population)\n\n\n\n\n\n\n\n\n\nTransaction function\n\n\nCode\nrandom_split &lt;- function(a, b) {\n  pot &lt;- a + b\n  share &lt;- runif(1, min = 0, max = pot)\n  return(c(max(0, share), max(0, pot - share)))  # Ensure values are non-negative\n}\n\nrandom_split(100, 100)\n\n\n[1]  25.70705 174.29295\n\n\nInteraction function\n\n\nCode\nanyone &lt;- function(N) { \n  return(sample(0:(N-1),2)) \n  }\n\nanyone(8)\n\n\n[1] 1 0\n\n\nSimulation function\n\n\nCode\nstep &lt;- function(population, transaction = random_split, interaction = anyone) {\n  indices &lt;- interaction(length(population))\n  i &lt;- indices[1]\n  j &lt;- indices[2]\n  new_values &lt;- transaction(population[i], population[j])\n  population[i] &lt;- new_values[1]\n  population[j] &lt;- new_values[2]\n  return(population)\n}\n\nsimulate &lt;- function(population, T, step_function = step, transaction = random_split, interaction = anyone) {\n  snapshots &lt;- list()\n  snapshots[[1]] &lt;- population\n  for(t in 1:T) {\n    population &lt;- step_function(population, transaction, interaction)\n    snapshots[[t + 1]] &lt;- population\n  }\n  return(snapshots)\n}\n\n\nVisualisation\n\n\nCode\nlibrary(ggplot2)\nlibrary(gridExtra)\n\n# Function to calculate percentiles\npercent &lt;- function(pct, items) {\n  return(quantile(items, probs = pct / 100))\n}\n\n# Function to simulate and display results\nshow &lt;- function(population, k = 40, percentiles = c(1, 10, 50, 90, 99), transaction = random_split, interaction = anyone, step_function = step) {\n  N &lt;- length(population)\n  start &lt;- population\n  T &lt;- k * N\n  \n  # Run the simulation\n  results &lt;- lapply(seq_len(T), function(t) {\n    pop &lt;- simulate(population, T, step_function, transaction, interaction)[[t]]\n    list(t = t, pop = sort(pop))  # Sort the population at each step\n  })\n  \n  # Filter results to only include the relevant time steps\n  results &lt;- results[seq(1, T, by = N / 10)]  # Print every N/10 steps\n  \n  # Printout\n  cat(sprintf(\"   t    Gini   stdev  %s\\n\", paste(sprintf(\"%3d%%\", percentiles), collapse = \" \")))\n  cat(sprintf(\"------- ----  -----  %s\\n\", paste(rep(\"----\", length(percentiles)), collapse = \" \")))\n  \n  for (res in results) {\n    t &lt;- res$t\n    pop &lt;- res$pop\n    gini_val &lt;- gini(pop)\n    stdev_val &lt;- sd(pop)\n    perc_vals &lt;- sapply(percentiles, function(pct) percent(pct, pop))\n    \n    if (t %% (k * N / 10) == 0) {\n      cat(sprintf(\"%7d %.2f  %5.1f  %s\\n\", t, gini_val, stdev_val, paste(sprintf(\"%4.0f\", perc_vals), collapse = \" \")))\n    }\n  }\n  \n  # Plot Percentile Plots\n  times &lt;- sapply(results, function(res) res$t)\n  data_list &lt;- lapply(percentiles, function(pct) {\n    sapply(results, function(res) percent(pct, res$pop))\n  })\n  \n  percentile_plot &lt;- ggplot() + theme_minimal() +\n    labs(x = 'Time', y = 'Wealth', title = paste(percentiles, 'Percentile Plots', sep = \"/\")) +\n    geom_line(aes(x = times, y = data_list[[1]], color = as.factor(percentiles[1])), size = 1) +\n    geom_line(aes(x = times, y = data_list[[2]], color = as.factor(percentiles[2])), size = 1) +\n    geom_line(aes(x = times, y = data_list[[3]], color = as.factor(percentiles[3])), size = 1) +\n    geom_line(aes(x = times, y = data_list[[4]], color = as.factor(percentiles[4])), size = 1) +\n    geom_line(aes(x = times, y = data_list[[5]], color = as.factor(percentiles[5])), size = 1) +\n    scale_color_discrete(name = \"Percentiles\")\n  \n  print(percentile_plot)\n  \n  # Plot Histograms (start vs end)\n  R &lt;- range(c(start, population))\n  start_hist &lt;- ggplot() + theme_minimal() + \n    geom_histogram(aes(x = start), binwidth = diff(R) / 30, fill = 'lightgreen', alpha = 0.7) + \n    labs(title = \"Start\", x = \"Wealth\", y = \"Frequency\")\n  \n  end_hist &lt;- ggplot() + theme_minimal() + \n    geom_histogram(aes(x = population), binwidth = diff(R) / 30, fill = 'lightblue', alpha = 0.7) + \n    labs(title = \"End\", x = \"Wealth\", y = \"Frequency\")\n  \n  grid.arrange(start_hist, end_hist, ncol = 2)\n  \n  # Plot Ordered Curves\n  order &lt;- seq_along(start)\n  start_sorted &lt;- sort(start)\n  pop_sorted &lt;- sort(population)\n  \n  ordered_plot &lt;- ggplot() + theme_minimal() +\n    geom_line(aes(x = start_sorted, y = order, color = \"Start\"), size = 1) +\n    geom_line(aes(x = pop_sorted, y = order, color = \"End\"), size = 1) +\n    labs(x = \"Wealth\", y = \"Order\", title = \"Ordered Curves\") +\n    scale_color_manual(values = c(\"Start\" = \"green\", \"End\" = \"blue\")) +\n    theme(legend.title = element_blank())\n  \n  print(ordered_plot)\n}\n\n# Example usage:\n# show(population)\n\n\n\n\n\n\n\n\n Back to top",
    "crumbs": [
      "About",
      "Assignment 2: The Economics Simulation"
    ]
  }
]