# Assignment 2: The Economics Simulation

Disclosure: A lot of this assignment was created by consulting ChatGPT, especially during the (as of yet) unsuccessful attempt to not have the endless warning "NAs produziert" as the final output

___

Preliminary definitions

```{r}
N <- 100 # default size of the population
MU <- 100 # default mean of the population

population <- rnorm(N, mean=MU, sd=MU/5)

percentile <- function(p, x) {
  return(quantile(x, probs = p / 100, na.rm = TRUE))
}
```

Gini Coefficient

```{r}
gini <- function(y) {
  y <- sort(y)
  n <- length(y)
  numer <- sum((2 * (1:n) - n - 1) * y)
  denom <- n * sum(y)
  gini_coeff <- numer / denom
  return(gini_coeff)
}
```

Plotting a histogram of the population

```{r}
hist(population)
```

Transaction function

```{r}
random_split <- function(a, b) {
  pot <- a + b
  share <- runif(1, min = 0, max = pot)
  return(c(max(0, share), max(0, pot - share)))  # Ensure values are non-negative
}

random_split(100, 100)

```

Interaction function 
```{r} 
anyone <- function(N) { 
  return(sample(0:(N-1),2)) 
  }

anyone(8)
```

Simulation function
```{r}
step <- function(population, transaction = random_split, interaction = anyone) {
  indices <- interaction(length(population))
  i <- indices[1]
  j <- indices[2]
  new_values <- transaction(population[i], population[j])
  population[i] <- new_values[1]
  population[j] <- new_values[2]
  return(population)
}

simulate <- function(population, T, step_function = step, transaction = random_split, interaction = anyone) {
  snapshots <- list()
  snapshots[[1]] <- population
  for(t in 1:T) {
    population <- step_function(population, transaction, interaction)
    snapshots[[t + 1]] <- population
  }
  return(snapshots)
}

```

Visualisation
```{r}
library(ggplot2)
library(gridExtra)

# Function to calculate percentiles
percent <- function(pct, items) {
  return(quantile(items, probs = pct / 100))
}

# Function to simulate and display results
show <- function(population, k = 40, percentiles = c(1, 10, 50, 90, 99), transaction = random_split, interaction = anyone, step_function = step) {
  N <- length(population)
  start <- population
  T <- k * N
  
  # Run the simulation
  results <- lapply(seq_len(T), function(t) {
    pop <- simulate(population, T, step_function, transaction, interaction)[[t]]
    list(t = t, pop = sort(pop))  # Sort the population at each step
  })
  
  # Filter results to only include the relevant time steps
  results <- results[seq(1, T, by = N / 10)]  # Print every N/10 steps
  
  # Printout
  cat(sprintf("   t    Gini   stdev  %s\n", paste(sprintf("%3d%%", percentiles), collapse = " ")))
  cat(sprintf("------- ----  -----  %s\n", paste(rep("----", length(percentiles)), collapse = " ")))
  
  for (res in results) {
    t <- res$t
    pop <- res$pop
    gini_val <- gini(pop)
    stdev_val <- sd(pop)
    perc_vals <- sapply(percentiles, function(pct) percent(pct, pop))
    
    if (t %% (k * N / 10) == 0) {
      cat(sprintf("%7d %.2f  %5.1f  %s\n", t, gini_val, stdev_val, paste(sprintf("%4.0f", perc_vals), collapse = " ")))
    }
  }
  
  # Plot Percentile Plots
  times <- sapply(results, function(res) res$t)
  data_list <- lapply(percentiles, function(pct) {
    sapply(results, function(res) percent(pct, res$pop))
  })
  
  percentile_plot <- ggplot() + theme_minimal() +
    labs(x = 'Time', y = 'Wealth', title = paste(percentiles, 'Percentile Plots', sep = "/")) +
    geom_line(aes(x = times, y = data_list[[1]], color = as.factor(percentiles[1])), size = 1) +
    geom_line(aes(x = times, y = data_list[[2]], color = as.factor(percentiles[2])), size = 1) +
    geom_line(aes(x = times, y = data_list[[3]], color = as.factor(percentiles[3])), size = 1) +
    geom_line(aes(x = times, y = data_list[[4]], color = as.factor(percentiles[4])), size = 1) +
    geom_line(aes(x = times, y = data_list[[5]], color = as.factor(percentiles[5])), size = 1) +
    scale_color_discrete(name = "Percentiles")
  
  print(percentile_plot)
  
  # Plot Histograms (start vs end)
  R <- range(c(start, population))
  start_hist <- ggplot() + theme_minimal() + 
    geom_histogram(aes(x = start), binwidth = diff(R) / 30, fill = 'lightgreen', alpha = 0.7) + 
    labs(title = "Start", x = "Wealth", y = "Frequency")
  
  end_hist <- ggplot() + theme_minimal() + 
    geom_histogram(aes(x = population), binwidth = diff(R) / 30, fill = 'lightblue', alpha = 0.7) + 
    labs(title = "End", x = "Wealth", y = "Frequency")
  
  grid.arrange(start_hist, end_hist, ncol = 2)
  
  # Plot Ordered Curves
  order <- seq_along(start)
  start_sorted <- sort(start)
  pop_sorted <- sort(population)
  
  ordered_plot <- ggplot() + theme_minimal() +
    geom_line(aes(x = start_sorted, y = order, color = "Start"), size = 1) +
    geom_line(aes(x = pop_sorted, y = order, color = "End"), size = 1) +
    labs(x = "Wealth", y = "Order", title = "Ordered Curves") +
    scale_color_manual(values = c("Start" = "green", "End" = "blue")) +
    theme(legend.title = element_blank())
  
  print(ordered_plot)
}

# Example usage:
# show(population)
```

